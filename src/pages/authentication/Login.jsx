import { saveUserToLocalStorage } from "@/utils/Localstorage";
import Head from "next/head";
import Link from "next/link";
import React, { useState } from "react";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import "react-toastify/dist/ReactToastify.css";
import Spinner from "@/components/Spinner";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [focusedInput, setFocusedInput] = useState(null);
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const validateForm = () => {
    const newErrors = {};

    if (!email) {
      newErrors.email = "E-mail is required";
    }
    if (!password) {
      newErrors.password = "Password is required";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const onFormSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      setIsLoading(true);
      try {
        const response = await fetch("/api/auth/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, password }),
        });

        if (response.ok) {
          const data = await response.json();
          saveUserToLocalStorage(data);

          if (data.role === "admin") {
            // Redirect to admin page if user is an admin
            toast.success("Logged in as admin");
            router.push("/admin");
          }
          toast.success("Login successful");
          router.push("/");
        } else {
          toast.error("User doesn't exist");
        }
      } catch (error) {
        alert(error.message);
      }
    }
    setIsLoading(false);
  };
  const handleInputClick = (inputName) => {
    setFocusedInput(inputName);
  };
  return (
    <div>
      <Head>
        <title>Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto text-center px-8 md:px-0">
        <div>
          <h1 className="font-futura text-[30px] md:text-[48px] font-semibold text-light mt-[140px] ">
            LOGIN
          </h1>
          <p className="mt-[14px] text-[14px] text-[#2E2E2E] font-opensans md:text-[15px]">
            Please enter your e-mail and password:
          </p>
        </div>
        <form
          onSubmit={onFormSubmit}
          className="font-opensans mx-auto md:max-w-[478px] w-auto mt-[44px]"
        >
          <div className="mt-4 relative">
            <input
              type="email"
              value={email}
              placeholder=" "
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "email"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("email")}
              onChange={(e) => setEmail(e.target.value)}
            />
            <label
              htmlFor="email"
              className={`absolute left-4 text-[14px] text-[#9b9191] top-4 transition-all duration-300 ${
                focusedInput === "email" || email
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Email
            </label>
          </div>
          {errors.email && <p className="text-red-500">{errors.email}</p>}
          <div className="mt-4 relative">
            <input
              type="password"
              value={password}
              placeholder=" "
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "password"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("password")}
              onChange={(e) => setPassword(e.target.value)}
            />
            <label
              htmlFor="password"
              className={`absolute left-4 text-[14px] top-4 text-[#9b9191] transition-all duration-300 ${
                focusedInput === "password" || password
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Password
            </label>
            <Link
              className="underline absolute right-0 top-4 px-4 text-primary text-[14px] md:text-[15px] font-opensans"
              href="/authentication/ForgotPassword"
            >
              Forgot Password?
            </Link>
          </div>
          {errors.password && <p className="text-red-500">{errors.password}</p>}
          <button
            type="submit"
            className="mt-[24px]  text-[12px] md:text-[14px] font-semibold bg-dark text-white px-[0px] tracking-[1.5px] py-[18px] w-full"
          >
            {isLoading ? <Spinner /> : "LOGIN"}
          </button>
        </form>
        <p className="mt-[14px] text-[14px]  text-[#2E2E2E] font-opensans md:text-[15px]">
          New customer?{" "}
          <Link
            className="underline text-primary"
            href="/authentication/Register"
          >
            Create an account
          </Link>
        </p>
      </div>
    </div>
  );
};

export default Login;
