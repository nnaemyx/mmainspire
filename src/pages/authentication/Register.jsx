import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Register = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [focusedInput, setFocusedInput] = useState(null);
  const [errors, setErrors] = useState({});

  const router = useRouter();

  const validateForm = () => {
    const newErrors = {};
    if (!name) {
      newErrors.name = "Name is required";
    }
    if (!email) {
      newErrors.email = "Email is required";
    } else if (
      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(email)
    ) {
      newErrors.email= "Invalid email address";
    }
    if (!phone) {
      newErrors.phone = "Phone number is required";
    }
    if (!password) {
      newErrors.password = "Password is required";
    } else if (password.length < 6) {
      newErrors.password = "Password must be at least 6 characters";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      try {
        const res = await fetch("/api/auth/signup", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: name,
              email: email,
              password: password,
              phone: phone,
            }),
          });
          if (res.ok) {
            toast.success("Registration successful");
            router.push("/");
          } else if (res.status === 422) {
            const data = await res.json();
            setErrors(data.message);
          } else {
            console.error("Signup failed:", res.statusText);
          }
      } catch (error) {
        toast.error("An error occurred during registration");
      }
    }
  };

  const handleInputClick = (inputName) => {
    setFocusedInput(inputName);
  };

  return (
    <div>
      <Head>
        <title>Create Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto text-center w-full px-8">
        <div>
          <h1 className="font-futura text-[30px] font-semibold md:text-[48px] text-light mt-[140px] ">
            REGISTER
          </h1>
          <p className="mt-[14px] text-[14px] text-[#2E2E2E] font-opensans md:text-[15px]">
            Please fill in the fields below:
          </p>
        </div>
        <form onSubmit={handleSubmit} className="font-opensans mx-auto md:max-w-[478px] w-auto mt-[44px]">
          <div className="w-full relative">
            <input
              type="text"
              placeholder=" "
              value={name}
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "name"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("name")}
              onChange={(e) => setName(e.target.value)}
            />
            <label
              htmlFor="name"
              className={`absolute left-4 text-[14px] text-[#9b9191] top-4 transition-all duration-300 ${
                focusedInput === "name" || name
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Name
            </label>
          </div>
          {errors.name && <p className="px-6 text-red-500 font-opensans">{errors.name}</p>}
          <div className="mt-4 relative">
            <input
              type="email"
              value={email}
              placeholder=" "
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "email"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("email")}
              onChange={(e) => setEmail(e.target.value)}
            />
            <label
              htmlFor="email"
              className={`absolute left-4 text-[14px] text-[#9b9191] top-4 transition-all duration-300 ${
                focusedInput === "email" || email
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Email
            </label>
          </div>
          {errors.email && <p className="px-6 text-red-500 font-opensans">{errors.email}</p>}
          <div className="mt-4 relative">
            <input
              type="number"
              value={phone}
              placeholder=" "
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "phone"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("phone")}
              onChange={(e) => setPhone(e.target.value)}
            />
            <label
              htmlFor="phone"
              className={`absolute left-4 text-[14px] text-[#9b9191] top-4 transition-all duration-300 ${
                focusedInput === "phone" || phone
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Phone No
            </label>
          </div>
          {errors.phone && <p className="px-6 text-red-500 font-opensans">{errors.phone}</p>}
          <div className="mt-4 relative">
            <input
              type="password"
              value={password}
              placeholder=" "
              className={`focus:outline-none w-[100%] border border-solid px-[18px] py-[18px] ${
                focusedInput === "password"
                  ? "border-dark border-[1.5px]"
                  : "border-gray-300 "
              }`}
              onClick={() => handleInputClick("password")}
              onChange={(e) => setPassword(e.target.value)}
            />
            <label
              htmlFor="password"
              className={`absolute left-4 text-[14px] top-4 text-[#9b9191] transition-all duration-300 ${
                focusedInput === "password" || password
                  ? "translate-y-[-125%] text-[12px] bg-white"
                  : ""
              }`}
            >
              Password
            </label>
          </div>
          {errors.password && <p className="px-6 text-red-500 font-opensans">{errors.password}</p>}
          <button
          type="submit"
            className="mt-[24px]  text-[12px] md:text-[14px] font-semibold bg-dark text-white px-[0px] tracking-[1.5px] py-[18px] w-full"
          >
            CREATE ACCOUNT
          </button>
        </form>
        <p className="mt-[14px] text-[14px]  text-[#2E2E2E] font-opensans md:text-[15px]">
          Already have an account? <Link className="underline text-primary" href="/authentication/Login">Login</Link>
        </p>
      </div>
    </div>
  );
};

export default Register;
